name: "Terragrunt CI/CD Pipeline"

on:
  push:
    branches:
      - '*'
    paths:
      - 'dev/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'dev/**'

jobs:
  terragrunt:
    name: Terragrunt
    permissions: write-all
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    env:
      WORKING_DIRECTORY: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false
      - name: Version Terraform  
        run:
          terraform --version

      - name: Setup Terragrunt
        run: |
          sudo wget -q -O /usr/bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.68.7/terragrunt_linux_amd64"
          sudo chmod +x /usr/bin/terragrunt
          terragrunt -v

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init

      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate

      - name: Terragrunt Plan
        id: plan
        if: github.event_name == 'push'
        run: |
          echo "Running terragrunt plan"
          terragrunt run-all plan -no-color
        continue-on-error: true
      
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
          INIT_OUTCOME: ${{ steps.init.outcome }}
          VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${process.env.INIT_OUTCOME}\`
            #### Terraform Validation ü§ñ\`${process.env.VALIDATE_OUTCOME}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN_OUTPUT}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Staging Terragrunt Apply
        if: github.head.ref_name == 'develop' && github.event_name == 'pull_request'
        run: terragrunt run-all apply --terragrunt-non-interactive

      - name: Production Terragrunt Apply
        if: github.head.ref_name == 'main' && github.event_name == 'pull_request'
        run: terragrunt run-all apply --terragrunt-non-interactive
 