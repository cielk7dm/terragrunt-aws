name: "Terragrunt CI/CD Pipeline"

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'dev/**'

env:
  tf_version: '1.9.8'
  tg_version: '0.68.7'
  working_dir: 'project'

permissions:
  contents: read
  pull-requests: write 

jobs:
  terragrunt-staging:
    name: 'Terragrunt-Staging'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@develop
      
      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

  terragrunt-production:
    name: 'Terragrunt-Production'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main
      
      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

  plan-staging:
    runs-on: ubuntu-latest
    needs: [ checks ]
    steps:
      - name: 'Checkout-Staging'
        uses: actions/checkout@develop

      - name: Plan-Staging
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'plan'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [ plan-staging ]
    environment: 'staging'
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@develop

      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'apply'


  plan-production:
    runs-on: ubuntu-latest
    needs: [ checks ]
    steps:
      - name: 'Checkout-Production'
        uses: actions/checkout@main

      - name: Plan-Production
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'plan'

  deploy-production:
    runs-on: ubuntu-latest
    needs: [ plan-production ]
    environment: 'prod'
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'apply'